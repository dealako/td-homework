{
  "Description" : "Template for creating a VPC, Security Groups, EC2 instances, and ELB for a sample application, Version 1.0.0",
  "Parameters" : {
    "KeyPair" : {
      "Description" : "The EC2 Key Pair to allow SSH access to the instance",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "MinLength" : "1",
      "MaxLength" : "64",
      "Default" : "aws-sms-oregon-dd",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "Must be the name of an existing EC2 KeyPair. Can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "Environment" : {
      "Description" : "Environment name prefix.",
      "Type" : "String",
      "Default" : "td"
    }
  },
  "Mappings" : {
    "RegionMap" : {
      "us-east-1" : {"AMI" : "NOT_SUPPORTED"},
      "us-west-1" : {"AMI" : "NOT_SUPPORTED"},
      "us-west-2" : {"AMI" : "ami-5e63d13e"}
    },
    "SubnetConfig" : {
      "VPC" : {"CIDR" : "10.0.0.0/16"},
      "PublicSubnet2a" : {"CIDR" : "10.0.0.0/24", "AZ" : "us-west-2a"},
      "PrivateSubnet2a" : {"CIDR" : "10.0.1.0/24", "AZ" : "us-west-2a"},
      "PrivateSubnet2b" : {"CIDR" : "10.0.2.0/24", "AZ" : "us-west-2b"},
      "PrivateSubnet2c" : {"CIDR" : "10.0.3.0/24", "AZ" : "us-west-2c"}
    }
  },
  "Resources" : {

    "DevOpsElasticIP" : {
      "DependsOn" : ["DevOps2a"],
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : {"Ref" : "DevOps2a"}
      }
    },

    "DevOpsElasticIPAssociation" : {
      "DependsOn" : ["DevOps2a", "DevOpsElasticIP"],
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "InstanceId" : {"Ref" : "DevOps2a"},
        "EIP" : {"Ref" : "DevOpsElasticIP"}
      }
    },

    "NATElasticIp" : {
      "DependsOn" : ["NatDevice2a"],
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : {"Ref" : "NatDevice2a"}
      }
    },

    "NATElasticIpAssociation" : {
      "DependsOn" : ["NatDevice2a", "NATElasticIp"],
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "InstanceId" : {"Ref" : "NatDevice2a"},
        "EIP" : {"Ref" : "NATElasticIp"}
      }
    },

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : {"Fn::FindInMap" : ["SubnetConfig", "VPC", "CIDR"]},
        "InstanceTenancy" : "default",
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join" : ["-", [{"Ref" : "Environment"}, "VPC"]]}},
          {"Key" : "Environment", "Value" : {"Ref" : "Environment"}},
          {"Key" : "Application", "Value" : {"Ref" : "AWS::StackName"}},
          {"Key" : "Network", "Value" : "Public"}
        ]
      }
    },

    "PublicSubnet2a" : {
      "DependsOn" : ["VPC"],
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "CidrBlock" : {"Fn::FindInMap" : ["SubnetConfig", "PublicSubnet2a", "CIDR"]},
        "AvailabilityZone" : {"Fn::FindInMap" : ["SubnetConfig", "PublicSubnet2a", "AZ"]},
        "Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join" : ["-", [{"Ref" : "Environment"}, "PublicSubnet-2a"]]}},
          {"Key" : "Environment", "Value" : {"Ref" : "Environment"}},
          {"Key" : "Application", "Value" : {"Ref" : "AWS::StackName"}}
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "DependsOn" : ["VPC"],
      "Properties" : {
        "Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join" : ["-", [{"Ref" : "Environment"}, "InternetGateway"]]}},
          {"Key" : "Environment", "Value" : {"Ref" : "Environment"}},
          {"Key" : "Application", "Value" : {"Ref" : "AWS::StackName"}},
          {"Key" : "Network", "Value" : "Public"}
        ]
      }
    },

    "VPCGatewayAttachment" : {
      "DependsOn" : ["VPC", "InternetGateway"],
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "InternetGatewayId" : {"Ref" : "InternetGateway"}
      }
    },

    "PublicRouteTable" : {
      "DependsOn" : ["VPC"],
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [
          {"Key" : "Environment", "Value" : {"Ref" : "Environment"}},
          {"Key" : "Application", "Value" : {"Ref" : "AWS::StackName"}},
          {"Key" : "Network", "Value" : "Public"}
        ]
      }
    },

    "PublicRoute" : {
      "DependsOn" : ["PublicRouteTable", "InternetGateway", "VPCGatewayAttachment"],
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : {"Ref" : "PublicRouteTable"},
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : {"Ref" : "InternetGateway"}
      }
    },

    "PublicSubnetRouteTableAssociation2a" : {
      "DependsOn" : ["PublicSubnet2a", "PublicRouteTable"],
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : {"Ref" : "PublicSubnet2a"},
        "RouteTableId" : {"Ref" : "PublicRouteTable"}
      }
    },

    "PrivateSubnet2a" : {
      "DependsOn" : ["VPC"],
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "CidrBlock" : {"Fn::FindInMap" : ["SubnetConfig", "PrivateSubnet2a", "CIDR"]},
        "AvailabilityZone" : {"Fn::FindInMap" : ["SubnetConfig", "PrivateSubnet2a", "AZ"]},
        "Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join" : ["-", [{"Ref" : "Environment"}, "PrivateSubnet-2a"]]}},
          {"Key" : "Environment", "Value" : {"Ref" : "Environment"}},
          {"Key" : "Application", "Value" : {"Ref" : "AWS::StackName"}}
        ]
      }
    },

    "PrivateSubnet2b" : {
      "DependsOn" : ["VPC"],
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "CidrBlock" : {"Fn::FindInMap" : ["SubnetConfig", "PrivateSubnet2b", "CIDR"]},
        "AvailabilityZone" : {"Fn::FindInMap" : ["SubnetConfig", "PrivateSubnet2b", "AZ"]},
        "Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join" : ["-", [{"Ref" : "Environment"}, "PrivateSubnet-2b"]]}},
          {"Key" : "Environment", "Value" : {"Ref" : "Environment"}},
          {"Key" : "Application", "Value" : {"Ref" : "AWS::StackName"}}
        ]
      }
    },

    "PrivateSubnet2c" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "CidrBlock" : {"Fn::FindInMap" : ["SubnetConfig", "PrivateSubnet2c", "CIDR"]},
        "AvailabilityZone" : {"Fn::FindInMap" : ["SubnetConfig", "PrivateSubnet2c", "AZ"]},
        "Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join" : ["-", [{"Ref" : "Environment"}, "PrivateSubnet-2c"]]}},
          {"Key" : "Environment", "Value" : {"Ref" : "Environment"}},
          {"Key" : "Application", "Value" : {"Ref" : "AWS::StackName"}}
        ]
      }
    },

    "PrivateRouteTable2a" : {
      "DependsOn" : ["VPC"],
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [
          {"Key" : "Environment", "Value" : {"Ref" : "Environment"}},
          {"Key" : "Application", "Value" : {"Ref" : "AWS::StackName"}},
          {"Key" : "Network", "Value" : "Private"}
        ]
      }
    },

    "PrivateRouteTable2b" : {
      "DependsOn" : ["VPC"],
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [
          {"Key" : "Environment", "Value" : {"Ref" : "Environment"}},
          {"Key" : "Application", "Value" : {"Ref" : "AWS::StackName"}},
          {"Key" : "Network", "Value" : "Private"}
        ]
      }
    },

    "PrivateRouteTable2c" : {
      "DependsOn" : ["VPC"],
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "VPC"},
        "Tags" : [
          {"Key" : "Environment", "Value" : {"Ref" : "Environment"}},
          {"Key" : "Application", "Value" : {"Ref" : "AWS::StackName"}},
          {"Key" : "Network", "Value" : "Private"}
        ]
      }
    },

    "PrivateSubnetRouteTableAssociation2a" : {
      "DependsOn" : ["PrivateSubnet2a", "PrivateRouteTable2a"],
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : {"Ref" : "PrivateSubnet2a"},
        "RouteTableId" : {"Ref" : "PrivateRouteTable2a"}
      }
    },

    "PrivateSubnetRouteTableAssociation2b" : {
      "DependsOn" : ["PrivateSubnet2b", "PrivateRouteTable2b"],
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : {"Ref" : "PrivateSubnet2b"},
        "RouteTableId" : {"Ref" : "PrivateRouteTable2b"}
      }
    },

    "PrivateSubnetRouteTableAssociation2c" : {
      "DependsOn" : ["PrivateSubnet2c", "PrivateRouteTable2c"],
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : {"Ref" : "PrivateSubnet2c"},
        "RouteTableId" : {"Ref" : "PrivateRouteTable2c"}
      }
    },

    "PrivateRoute2a" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "DestinationCidrBlock" : "0.0.0.0/0",
        "RouteTableId" : {"Ref" : "PrivateRouteTable2a"},
        "InstanceId" : {"Ref" : "NatDevice2a"}
      }
    },

    "PrivateRoute2b" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "DestinationCidrBlock" : "0.0.0.0/0",
        "RouteTableId" : {"Ref" : "PrivateRouteTable2b"},
        "InstanceId" : {"Ref" : "NatDevice2a"}
      }
    },

    "PrivateRoute2c" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "DestinationCidrBlock" : "0.0.0.0/0",
        "RouteTableId" : {"Ref" : "PrivateRouteTable2c"},
        "InstanceId" : {"Ref" : "NatDevice2a"}
      }
    },

    "DevOpsSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "DevOps Instance Security Group",
        "VpcId" : {"Ref" : "VPC"},
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "162.202.62.248/32"},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "141.206.246.10/32"}
        ]
      }
    },

    "NATSecurityGroup" : {
      "DependsOn" : ["DevOpsSecurityGroup"],
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "NAT Device Security Group",
        "VpcId" : {"Ref" : "VPC"},
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "1",
            "ToPort" : "65535",
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      }
    },

    "ELBSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Elastic Load Balancer Security Group",
        "VpcId" : {"Ref" : "VPC"},
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"}
        ]
      }
    },

    "WebServerSecurityGroup" : {
      "DependsOn" : ["DevOpsSecurityGroup", "ELBSecurityGroup"],
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Web Server Security Group",
        "VpcId" : {"Ref" : "VPC"}
      }
    },

    "NATSSHInboundRule" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "IpProtocol" : "tcp",
        "FromPort" : "22",
        "ToPort" : "22",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : ["DevOpsSecurityGroup", "GroupId"]
        },
        "GroupId" : {
          "Fn::GetAtt" : ["NATSecurityGroup", "GroupId"]
        }
      }
    },

    "WebServerSSHInboundRule" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "IpProtocol" : "tcp",
        "FromPort" : "22",
        "ToPort" : "22",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : ["DevOpsSecurityGroup", "GroupId"]
        },
        "GroupId" : {
          "Fn::GetAtt" : ["WebServerSecurityGroup", "GroupId"]
        }
      }
    },

    "WebServerHTTPInboundRule" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "IpProtocol" : "tcp",
        "FromPort" : "8900",
        "ToPort" : "8900",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : ["ELBSecurityGroup", "GroupId"]
        },
        "GroupId" : {
          "Fn::GetAtt" : ["WebServerSecurityGroup", "GroupId"]
        }
      }
    },

    "DevOps2a" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : "t2.micro",
        "KeyName" : {"Ref" : "KeyPair"},
        "SubnetId" : {"Ref" : "PublicSubnet2a"},
        "SourceDestCheck" : "false",
        "ImageId" : {"Fn::FindInMap" : ["RegionMap", {"Ref" : "AWS::Region"}, "AMI"]},
        "SecurityGroupIds" : [{"Ref" : "DevOpsSecurityGroup"}],
        "Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join" : ["-", [{"Ref" : "Environment"}, "DevOps"]]}}
        ]
      }
    },

    "NatDevice2a" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : "t2.small",
        "KeyName" : {"Ref" : "KeyPair"},
        "SubnetId" : {"Ref" : "PublicSubnet2a"},
        "SourceDestCheck" : "false",
        "ImageId" : "ami-11fd2e71",
        "SecurityGroupIds" : [{"Ref" : "NATSecurityGroup"}],
        "Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join" : ["-", [{"Ref" : "Environment"}, "NAT-Device"]]}}
        ]
      }
    },

    "WebServer1Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : {"Fn::FindInMap" : ["RegionMap", {"Ref" : "AWS::Region"}, "AMI"]},
        "KeyName" : {"Ref" : "KeyPair"},
        "SecurityGroupIds" : [{"Ref" : "WebServerSecurityGroup"}],
        "InstanceType" : "t2.micro",
        "SubnetId" : {"Ref" : "PrivateSubnet2a"},
        "Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join" : ["-", [{"Ref" : "Environment"}, "WebServer-1-NGINX"]]}},
          {"Key" : "Environment", "Value" : {"Ref" : "Environment"}},
          {"Key" : "Application", "Value" : {"Ref" : "AWS::StackName"}},
          {"Key" : "Network", "Value" : "Private"}
        ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
              "", [
                "#!/bin/bash -v\n",
                "set -o errexit; set -o nounset; set -o pipefail\n",
                "# Install AWS cfn-bootstrap utilities\n",
                "apt-get update\n",
                "apt-get -y install python-setuptools\n",
                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "cfn-init", " --stack ", {"Ref" : "AWS::StackName"},
                " --resource MyLogicalResourceName",
                " --configsets bootstrap-chef",
                " --region ", {"Ref" : "AWS::Region"}, "\n",
                "## Nginx setup\n",
                "cp /tmp/nginx/default.conf /etc/nginx/conf.d/default.conf\n",
                "service nginx restart\n"
              ]
            ]
          }
        }
      },
      "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install the NGINX Web Server",
        "Comment2" : "The web site content is downloaded from the referenced zip file",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "apt" : {
                "ntp" : [],
                "nginx" : []
              }
            },
            "sources" : {
              "/usr/share/nginx/html" : "https://s3-us-west-2.amazonaws.com/td-homework/cloud-formation-web-1.zip"
            }
          },
          "files" : {
            "/tmp/nginx/default.conf" : {
              "content" : {
                "Fn::Join" : [
                  "",
                  [
                    "# Run NGINX as non-root\n",
                    "user nginx;\n\n",
                    "server {\n",
                    "  listen 8900;\n",
                    "  charset utf-8;\n",
                    "  access_log                    /var/log/tdcustom/accesslogs/nginx.vhost.access.log;\n",
                    "  error_log                     /var/log/tdcustom/errorlogs/nginx.vhost.error.log;\n",
                    "  index                         index.html index.htm;\n",
                    "}\n"
                  ]
                ]
              },
              "mode" : "000755",
              "owner" : "nginx",
              "group" : "nginx"
            }
          },
          "services" : {
            "sysvinit" : {
              "nginx" : {
                "enabled" : "true",
                "ensureRunning" : "true",
                "files" : [
                  "/etc/nginx/conf.d/default.conf"
                ]
              }
            }
          }
        }
      }
    },
    "WebServer2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : {"Fn::FindInMap" : ["RegionMap", {"Ref" : "AWS::Region"}, "AMI"]},
        "KeyName" : {"Ref" : "KeyPair"},
        "SecurityGroupIds" : [{"Ref" : "WebServerSecurityGroup"}],
        "InstanceType" : "t2.micro",
        "SubnetId" : {"Ref" : "PrivateSubnet2b"},
        "Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join" : ["-", [{"Ref" : "Environment"}, "WebServer-2-NGINX"]]}},
          {"Key" : "Environment", "Value" : {"Ref" : "Environment"}},
          {"Key" : "Application", "Value" : {"Ref" : "AWS::StackName"}},
          {"Key" : "Network", "Value" : "Private"}
        ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
              "", [
                "#!/bin/bash -v\n",
                "set -o errexit; set -o nounset; set -o pipefail\n",
                "# Install AWS cfn-bootstrap utilities\n",
                "apt-get update\n",
                "apt-get -y install python-setuptools\n",
                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "cfn-init", " --stack ", {"Ref" : "AWS::StackName"},
                " --resource MyLogicalResourceName",
                " --configsets bootstrap-chef",
                " --region ", {"Ref" : "AWS::Region"}, "\n",
                "## Nginx setup\n",
                "cp /tmp/nginx/default.conf /etc/nginx/conf.d/default.conf\n",
                "service nginx restart\n"
              ]
            ]
          }
        }
      },
      "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install the NGINX Web Server",
        "Comment2" : "The web site content is downloaded from the referenced zip file",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "apt" : {
                "ntp" : [],
                "nginx" : []
              }
            },
            "sources" : {
              "/usr/share/nginx/html" : "https://s3-us-west-2.amazonaws.com/td-homework/cloud-formation-web-2.zip"
            }
          },
          "files" : {
            "/tmp/nginx/default.conf" : {
              "content" : {
                "Fn::Join" : [
                  "",
                  [
                    "# Run NGINX as non-root\n",
                    "user nginx;\n\n",
                    "server {\n",
                    "  listen 8900;\n",
                    "  charset utf-8;\n",
                    "  access_log                    /var/log/tdcustom/accesslogs/nginx.vhost.access.log;\n",
                    "  error_log                     /var/log/tdcustom/errorlogs/nginx.vhost.error.log;\n",
                    "  index                         index.html index.htm;\n",
                    "}\n"
                  ]
                ]
              },
              "mode" : "000755",
              "owner" : "nginx",
              "group" : "nginx"
            }
          },
          "services" : {
            "sysvinit" : {
              "nginx" : {
                "enabled" : "true",
                "ensureRunning" : "true",
                "files" : [
                  "/etc/nginx/conf.d/default.conf"
                ]
              }
            }
          }
        }
      }
    },

    "WebServer3Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : {"Fn::FindInMap" : ["RegionMap", {"Ref" : "AWS::Region"}, "AMI"]},
        "KeyName" : {"Ref" : "KeyPair"},
        "SecurityGroupIds" : [{"Ref" : "WebServerSecurityGroup"}],
        "InstanceType" : "t2.micro",
        "SubnetId" : {"Ref" : "PrivateSubnet2c"},
        "Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join" : ["-", [{"Ref" : "Environment"}, "WebServer-3-NGINX"]]}},
          {"Key" : "Environment", "Value" : {"Ref" : "Environment"}},
          {"Key" : "Application", "Value" : {"Ref" : "AWS::StackName"}},
          {"Key" : "Network", "Value" : "Private"}
        ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
              "", [
                "#!/bin/bash -v\n",
                "set -o errexit; set -o nounset; set -o pipefail\n",
                "# Install AWS cfn-bootstrap utilities\n",
                "apt-get update\n",
                "apt-get -y install python-setuptools\n",
                "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "cfn-init", " --stack ", {"Ref" : "AWS::StackName"},
                " --resource MyLogicalResourceName",
                " --configsets bootstrap-chef",
                " --region ", {"Ref" : "AWS::Region"}, "\n",
                "## Nginx setup\n",
                "cp /tmp/nginx/default.conf /etc/nginx/conf.d/default.conf\n",
                "service nginx restart\n"
              ]
            ]
          }
        }
      },
      "Metadata" : {
        "Comment1" : "Configure the bootstrap helpers to install the NGINX Web Server",
        "Comment2" : "The web site content is downloaded from the referenced zip file",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "apt" : {
                "ntp" : [],
                "nginx" : []
              }
            },
            "sources" : {
              "/usr/share/nginx/html" : "https://s3-us-west-2.amazonaws.com/td-homework/cloud-formation-web-3.zip"
            }
          },
          "files" : {
            "/tmp/nginx/default.conf" : {
              "content" : {
                "Fn::Join" : [
                  "",
                  [
                    "# Run NGINX as non-root\n",
                    "user nginx;\n\n",
                    "server {\n",
                    "  listen 8900;\n",
                    "  charset utf-8;\n",
                    "  access_log                    /var/log/tdcustom/accesslogs/nginx.vhost.access.log;\n",
                    "  error_log                     /var/log/tdcustom/errorlogs/nginx.vhost.error.log;\n",
                    "  index                         index.html index.htm;\n",
                    "}\n"
                  ]
                ]
              },
              "mode" : "000755",
              "owner" : "nginx",
              "group" : "nginx"
            }
          },
          "services" : {
            "sysvinit" : {
              "nginx" : {
                "enabled" : "true",
                "ensureRunning" : "true",
                "files" : [
                  "/etc/nginx/conf.d/default.conf"
                ]
              }
            }
          }
        }
      }
    },

    "ElasticLoadBalancer" : {
      "DependsOn" : ["WebServer1Instance", "WebServer2Instance", "WebServer3Instance"],
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Scheme" : "internet-facing",
        "SecurityGroups" : [{"Ref" : "ELBSecurityGroup"}],
        "Subnets" : [{"Ref" : "PrivateSubnet2a"}, {"Ref" : "PrivateSubnet2b"}, {"Ref" : "PrivateSubnet2c"}]
      }
    },

    "ELBTargetGroup" : {
      "DependsOn" : ["ElasticLoadBalancer"],
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "HealthCheckIntervalSeconds" : 30,
        "HealthCheckProtocol" : "HTTP",
        "HealthCheckTimeoutSeconds" : 10,
        "HealthyThresholdCount" : 4,
        "Matcher" : {
          "HttpCode" : "200"
        },
        "Name" : "ELBTargetGroup",
        "Port" : 8900,
        "Protocol" : "HTTP",
        "TargetGroupAttributes" : [
          {
            "Key" : "deregistration_delay.timeout_seconds",
            "Value" : "20"
          }
        ],
        "Targets" : [
          {"Id" : {"Ref" : "WebServer1Instance"}, "Port" : 8900},
          {"Id" : {"Ref" : "WebServer2Instance"}, "Port" : 8900},
          {"Id" : {"Ref" : "WebServer3Instance"}, "Port" : 8900}
        ],
        "UnhealthyThresholdCount" : 3,
        "VpcId" : {"Ref" : "VPC"}
      }
    },

    "ELBHTTPListener" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "DefaultActions" : [
          {
            "Type" : "forward",
            "TargetGroupArn" : {"Ref" : "ELBTargetGroup"}
          }
        ],
        "LoadBalancerArn" : {"Ref" : "ElasticLoadBalancer"},
        "Port" : "80",
        "Protocol" : "HTTP"
      }
    }

  },

  "Outputs" : {
    "WebServer1Instance" : {
      "Description" : "The InstanceId of the new Web Server EC2 instance",
      "Value" : {
        "Ref" : "WebServer1Instance"
      }
    },
    "DevOpsHost" : {
      "Value" : {"Fn::Join" : ["", ["ssh -i ~/.ssh/", {"Ref" : "KeyPair"}, ".pem", "ubuntu@", {"Fn::GetAtt" : ["DevOps2a", "PublicDnsName"]}]]},
      "Description" : "Login command for DevOps"
    }
  },

  "AWSTemplateFormatVersion" : "2010-09-09"
}
